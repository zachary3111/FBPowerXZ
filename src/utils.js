export const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
export function parseAbbrevNumber(val){ if(val==null)return null; const v=String(val).replace(/[,\s]/g,'').toUpperCase(); const m=v.match(/^(\d+(?:\.\d+)?)([KMB])?$/); if(!m) return Number.isFinite(+v)?+v:null; const n=parseFloat(m[1]); const mult={K:1e3,M:1e6,B:1e9}[m[2]]||1; return Math.round(n*mult); }
export function pickCounts(text){ const t=(text||'').replace(/\u00A0/g,' '); const grab=(res)=>{ for(const re of res){const m=t.match(re); if(m) return parseAbbrevNumber(m[1]);} return null;}; const reactions=grab([/(\d+[\d,.KMBkmb]*)\s*(?:reactions?|likes?)/i]); const comments=grab([/(\d+[\d,.KMBkmb]*)\s*comments?/i]); const shares=grab([/(\d+[\d,.KMBkmb]*)\s*shares?/i]); return {reactions,comments,shares}; }
export function parseReactionsBreakdown(s){ const get=(n)=>{ const re=new RegExp(`(\\d+[\\d,.KMBkmb]*)\\s*${n}`,'i'); const m=s.match(re); return m?parseAbbrevNumber(m[1]):0;}; return {like:get('like'),love:get('love'),haha:get('haha'),wow:get('wow'),sad:get('sad'),angry:get('angry'),care:get('care')}; }
export function toEpoch(dateStr){ if(!dateStr)return null; const [y,m,d]=dateStr.split('-').map(Number); const dt=new Date(Date.UTC(y,m-1,d,0,0,0)); return Math.floor(dt.getTime()/1000); }
export function shouldBlockRequest(req){ const type=req.resourceType(); if(["font","media"].includes(type)) return true; const url=req.url(); if(/\.mp4|instagram\.com\/static|staticxx/i.test(url)) return true; return false; }
export function isBlocked(html){ if(!html)return false; return /(you['â€™]re temporarily blocked|help us confirm you own this account|checkpoint|unusual activity|enter the code we sent)/i.test(html); }
